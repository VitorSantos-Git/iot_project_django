# Generated by Django 5.2.7 on 2025-10-25 15:59

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_id', models.CharField(db_index=True, help_text='ID único enviado pelo ESP8266 (ex: ESP8266_002)', max_length=50, unique=True)),
                ('name', models.CharField(default='Dispositivo IoT', help_text='Nome amigável para exibição na interface', max_length=100)),
                ('device_type', models.CharField(default='Genérico', help_text='Tipo de dispositivo (ex: Rele Iluminação, Sensor Temperatura)', max_length=100)),
                ('location', models.CharField(default='Desconhecido', help_text='Localização física do dispositivo', max_length=100)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='Último endereço IP conhecido do dispositivo', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Indica se o dispositivo está ativo/disponível')),
                ('pending_command', models.JSONField(blank=True, help_text="Comando pendente no formato JSON para execução (ex: {'action': 'ligar_rele', 'target': 'rele_D1', 'value': 1})", null=True)),
                ('last_command', models.CharField(blank=True, help_text='Confirmação do último comando executado pelo dispositivo', max_length=255, null=True)),
                ('last_seen', models.DateTimeField(default=django.utils.timezone.now, help_text='Registro do último check-in (POST) do dispositivo')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Dispositivo',
                'verbose_name_plural': 'Dispositivos',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TelemetryData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('temperature_celsius', models.FloatField(blank=True, help_text='Temperatura em Celsius', null=True)),
                ('humidity_percent', models.FloatField(blank=True, help_text='Umidade do ar em porcentagem', null=True)),
                ('relay_state_D1', models.BooleanField(default=False, help_text='Estado do relé (True/False)')),
                ('last_button_action', models.CharField(blank=True, help_text='Ação local acionada por botão (se houver)', max_length=50, null=True)),
                ('raw_data', models.JSONField(blank=True, help_text='Dados JSON brutos enviados pelo dispositivo', null=True)),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now, help_text='Timestamp do registro (quando foi recebido)')),
                ('device', models.ForeignKey(help_text='Dispositivo que enviou este registro', on_delete=django.db.models.deletion.CASCADE, related_name='telemetry_records', to='devices.device')),
            ],
            options={
                'verbose_name': 'Dado de Telemetria',
                'verbose_name_plural': 'Dados de Telemetria',
                'ordering': ['-timestamp'],
            },
        ),
    ]
